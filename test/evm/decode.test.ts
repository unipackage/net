var assert = require("assert")
const { it } = require("mocha")
import { datasets } from "./env/datasets"

describe("Encoding and decoding test", () => {
    describe("decodeTxInput Test", () => {
        it("correct test", () => {
            const decode = datasets.decodeTxInput(
                "0xa31e76710000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a5367757a46505851584e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a347373674f3836327a7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a457758386353716d4d3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a644d6e4658505550613300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7452393954375947326c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4c4d32744d365157343800000000000000000000000000000000000000000000"
            )

            const expected = {
                ok: true,
                data: {
                    method: "submitDatasetMetadata",
                    params: {
                        title: "SguzFPXQXN",
                        industry: "4ssgO862zu",
                        name: "EwX8cSqmM9",
                        description: "dMnFXPUPa3",
                        source: "tR99T7YG2l",
                        accessMethod: "LM2tM6QW48",
                        sizeInBytes: BigInt(512000000),
                        isPublic: true,
                        version: BigInt(1),
                    },
                },
            }

            assert.deepStrictEqual(decode, expected)
        })

        it("error test: not found function in abi", () => {
            const decode = datasets.decodeTxInput(
                "0xc31e76710000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a5367757a46505851584e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a347373674f3836327a7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a457758386353716d4d3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a644d6e4658505550613300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7452393954375947326c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4c4d32744d365157343800000000000000000000000000000000000000000000"
            )
            const expected = {
                ok: false,
                error: "Not found function in ABI!",
            }

            assert.deepStrictEqual(decode, expected)
        })
    })

    describe("encodeEvmInputToTxinput test", () => {
        it("correct test", () => {
            const txinput = datasets.encodeEvmInputToTxinput({
                method: "submitDatasetMetadata",
                params: [
                    "SguzFPXQXN",
                    "4ssgO862zu",
                    "EwX8cSqmM9",
                    "dMnFXPUPa3",
                    "tR99T7YG2l",
                    "LM2tM6QW48",
                    BigInt(512000000),
                    true,
                    BigInt(1),
                ],
            })

            const expected =
                "0xa31e76710000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a5367757a46505851584e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a347373674f3836327a7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a457758386353716d4d3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a644d6e4658505550613300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7452393954375947326c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4c4d32744d365157343800000000000000000000000000000000000000000000"

            assert.deepStrictEqual(txinput.data, expected)
        })
    })

    describe("encodeFunctionSignatureByAbi test", () => {
        it("correct test", () => {
            const functionSignature = datasets.encodeFunctionSignatureByAbi(
                datasets.getContractABI()[32]
            )

            const expected = "0xa31e7671"

            assert.deepStrictEqual(functionSignature.data, expected)
        })
    })

    describe("encodeFunctionSignatureByFunctionName test", () => {
        it("correct test", () => {
            const functionSignature =
                datasets.encodeFunctionSignatureByFuntionName(
                    "submitDatasetMetadata"
                )

            const expected = "0xa31e7671"

            assert.deepStrictEqual(functionSignature.data, expected)
        })
    })
})
